"""
Forecasting utilities for the IBP system.
Implements various statistical and machine learning forecasting models.
"""
# Add warning suppression
import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning

# Silence common warnings that affect forecasting
warnings.filterwarnings("ignore", message="Non-invertible starting MA parameters found")
warnings.filterwarnings("ignore", category=ConvergenceWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", message="Could not infer format")


import numpy as np
import pandas as pd
from typing import Tuple, Dict, Any, List, Optional
from datetime import datetime
import statsmodels.api as sm
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import xgboost as xgb
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
import matplotlib.pyplot as plt
from prophet import Prophet

# Add warning suppression
import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning

# Silence common warnings that affect forecasting
warnings.filterwarnings("ignore", message="Non-invertible starting MA parameters found")
warnings.filterwarnings("ignore", category=ConvergenceWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", message="Could not infer format")

# Add warning suppression
import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning

# Silence common warnings that affect forecasting
warnings.filterwarnings("ignore", message="Non-invertible starting MA parameters found")
warnings.filterwarnings("ignore", category=ConvergenceWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", message="Could not infer format")
warnings.filterwarnings("ignore", message="Covariance matrix is singular")
# Add warning suppression
import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning

# Silence common warnings that affect forecasting
warnings.filterwarnings("ignore", message="Non-invertible starting MA parameters found")
warnings.filterwarnings("ignore", category=ConvergenceWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", message="Could not infer format")
warnings.filterwarnings("ignore", message="Covariance matrix is singular")


# Add warning suppression
import warnings
from statsmodels.tools.sm_exceptions import ConvergenceWarning

# Silence common warnings that affect forecasting
warnings.filterwarnings("ignore", message="Non-invertible starting MA parameters found")
warnings.filterwarnings("ignore", category=ConvergenceWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", message="Could not infer format")

# Function definitions would go here
# ...

def generate_sample_forecast_data(n_periods: int = 36, 
                              freq: str = 'MS',
                              with_trend: bool = True,
                             with_seasonality: bool = True,
                             with_noise: bool = True) -> pd.DataFrame:
    """
    Generate sample time series data for forecasting examples.
    
    Args:
        n_periods: Number of periods to generate
        freq: Frequency of time series ('MS' = month start)
        with_trend: Whether to include trend component
        with_seasonality: Whether to include seasonality
        with_noise: Whether to add random noise
        
    Returns:
        DataFrame with date and value columns
    """
    # Create date range
    dates = pd.date_range(start='2020-01-01', periods=n_periods, freq=freq)
    
    # Base value
    base_value = 1000
    
    # Create components
    trend = np.arange(n_periods) * 20 if with_trend else np.zeros(n_periods)
    
    seasonality = np.zeros(n_periods)
    if with_seasonality:
        # Monthly seasonality
        for i in range(n_periods):
            month = dates[i].month
            # Higher demand in Q4, lower in Q1
            if month in [10, 11, 12]:  # Q4
                seasonality[i] = 300
            elif month in [1, 2, 3]:  # Q1
                seasonality[i] = -150
            elif month in [7, 8]:  # Summer
                seasonality[i] = 200
    
    noise = np.random.normal(0, 100, n_periods) if with_noise else np.zeros(n_periods)
    
    # Combine components
    values = base_value + trend + seasonality + noise
    
    # Ensure no negative values
    values = np.maximum(values, 0)
    
    # Create DataFrame
    df = pd.DataFrame({
        'date': dates,
        'value': values
    })
    
    return df
